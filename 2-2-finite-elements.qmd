{{< include macros.qmd >}}

# The Finite Element Method {#sec-fem}

Analytical solutions for mechanics problems tend to exist only in
relatively simple problems, with simple constitutive relations. To get
more accurate models of real-world situations, we need to resort to
numerical methods, just as we must do with fluid modelling.

A highly successful methodology for solving the equations of solid
mechanics is known as the *Finite Element Method (FEM)*. In this
chapter, we will begin introducing this framework for dealing with
partial differential equations. A core part of the idea of FEM is to
relax the requirement that the functions involved need to be
differentiable, and work with a *weak form* of the equations. This is
unlikely to be intuitive to you at first, but hopefully you will see the
utility as we go on!

The general steps to derive a finite element approximation of the
solution of a PDE are as follows:

- Write down the full PDE problem with boundary conditions. This is
  known as the *strong form* of the problem.

- Multiply by a *test function* and use integration by parts to derive
  an integral formulation of the problem. This is the *weak form* of the
  problem.

- Introduce a *discrete basis* of functions to express approximate both
  weak solutions to the problem and test functions.

- Derive a system of *discrete equations* for the coefficients of the
  basis which can then be solved numerically.

In practice, the steps to do this are typically handled by dedicated
software, but here we will focus on building understanding of the
methodology by working through the derivation ourselves. This will
clarify much of the terminology around finite elements, and allow us to
discuss some subtleties.

## A first problem: a thin column

::: {#fig-thinrod}
![](tikz/ThinRod.svg){height=5cm}

A thin column loaded from above, subject to a gravitational body force.
:::

In order to give a concrete illustration of how this method works, we
will consider a simple test problem in 1D. This is simple enough that we
can work out the solution analytically as a way to validate a numerical
implementation.

Consider a thin column which we think of as undergoing only small
displacements in the $X$ and $Y$ directions, as illustrated in
@fig-thinrod. If the cross-section of the column is much
smaller than the overall length, and displacements in the $X$ and
$Y$ directions are small, we expect to be able to look for solutions
that take the form ${\boldsymbol u}= (0,0,w(Z))$. Substituting this
into the elasticity equations (and some asymptotic analysis that we
skip over here), we find that $w$ should satisfy the problem
$$
\frac{\partial}{\partial Z}\left(E\frac{\partial w}{\partial Z}\right)=\rho g,
$$
where $E$ is the Young's modulus of the material, $\rho$ is its density
and $g$ is the acceleration due to gravity.

To model the set up further, we must prescribe boundary conditions. We
will assume the column sits on a rigid base at $Z=0$, so $w(0) = 0$,
and that the top end of the column is subject to a normal compressive
stress ${\boldsymbol S}{\boldsymbol e}_3 = -\sigma{\boldsymbol e}_3$
with $\sigma\geq 0$. Dropping the subscripts for short, our problem is
$$
\frac{d}{dZ}\left(E\frac{dw}{dZ}\right)=\rho g,\quad w(0) = 0\quad\text{and}\quad E\frac{dw}{dZ}(L) = -\sigma.
$$ {#eq-colstrongform}
This is the full *strong form* of the problem; a conventional solution requires $w$ to have 2 derivatives, and
satisfying the boundary conditions at the ends.

In this case, we can find the solution directly. Solving analytically by
integrating twice and applying the boundary conditions, we find the
solution is
$$
w(Z)=\frac{\rho g}{2E}Z^2- \frac{\rho gL}{E}Z-\frac{\sigma}{E}Z.
$$
We can use our solution to make some meaningful predictions: the new length
of the column under these conditions is given by the original length plus
the displacement of the endpoint, i.e.
$$
\text{New length} = L+w(L) = L \left(1-\frac{\rho gL}{2E}-\frac{\sigma}{E}\right).
$$
We see that the denser the column and the greater the load applied, the
shorter the column gets, which makes intuitive sense. We can also use
our solution to find the stress acting at the base, which is
$$
\text{Stress acting on base} = E\frac{dw}{dZ}(0) = -\rho g L-\sigma.
$$
The first of these terms reflects the weight of the column (mass density
times gravitational field strength times volume), while the latter is
the load acting on the top of the column being transmitted to the base.

## The weak form

To proceed in our journey towards a finite element approximate solution
of the mechanical problem, we next generate a *weak form* for
@eq-weakform. The general procedure for this is to:

- Multiply the equation by a *test function* defined on the problem
  domain;

- Integrate the result over the domain; and then

- Use integration by parts to move one or more derivatives from the
  function we are solving for onto the test function.

In the problem we are considering, we denote the test function $\phi$ (also
called a *weight function* in the Engineering literature). Integrating
over the domain gives
$$
\int_0^L\frac{d}{dZ}\left(E\frac{dw}{dZ}\right)\phi\,dZ=\int_0^L\rho g\phi \,dZ.
$$
If we integrate by parts in the first term, on the left-hand side we
obtain
$$
\int_0^L\frac{d}{dZ}\left(E\frac{dw}{dZ}\right)\phi\,dZ = \left[E\frac{dw}{dZ}\phi\right]_{Z=0}^{Z=L}-\int_0^LE\frac{dw}{dZ}\frac{d\phi}{dZ}\,dZ
$$
Substituting in the boundary condition at $Z=L$, and assuming that
the test function satisfies $\phi(0)=0$, our integral form can be rearranged to give
$$
\int_0^LE\frac{dw}{dZ}\frac{d\phi}{dZ}\,dZ+\sigma \phi(L)+\int_0^L\rho g\phi \,dZ=0.
$$ {#eq-weakform}
We now argue as follows: if $w$ were a solution of the strong form
@eq-colstrongform, then the equality we have derived must
hold for any choice of test function $\phi$. We can see the test function
as a sort of 'measurement' of how well the equation is satisfied; if
there was a region where the equation wasn't satisfied, we could find
$\phi$ to make the left-hand side of @eq-weakform would give a non-zero result.

This leads us to define the concept of a *weak solution* for our
problem. A *weak solution* is a function $w$ which satisfies the
integral equality @eq-weakform for any test function $\phi$ satisfying $\phi(0)=0$.
The reason that we call this a weak solution is that we only need $w$ to
have one derivative to make sense of the integral on the left-hand side,
whereas the strong form requires us to make sense of two derivatives. In
fact, we assume even less: $w$ only needs to have a derivative
*piecewise*, so can have a finite number of points where it jumps. The
way we have derived the weak form ensures that any solution to the
strong form must satisfy the weak form, but the reverse need not
necessarily be true.

You may be wondering at this stage why we required that the test
function satisfies $\phi(0)=0$. It turns out that this is always the right
choice when we prescribe the values of the solution itself at the
boundary, i.e. any Dirichlet boundary condition, but to really see why
requires more context that we can currently give; ask me during a workshop 
if you'd like to know more.

## Discretisation

So far, it doesn't seem that we've gained anything; we've replaced the
strong form with the apparently harder to handle weak form. However, what
we have gained is the ability to handle solutions that don't have 2
derivatives. This gives us much more flexibility to discretise our
solution (and to do mathematical analysis, but that's a story for
elsewhere!).

We now need to decide how to approximate solutions to our problem, and
we'll see that we need to approximate test functions too. There are many
possible choices available to do this, including polynomials,
trigonometric functions, and many more. All can be used to construct
approximate solutions in the way we do so below, however the term
'finite elements' typically refers to the case where we approximate
solutions piecewise polynomial functions.

Let's consider writing an approximate solution (which we call $w^h$) as
a linear combination of functions, so
$$
w^h(Z) = \sum_{i=1}^M d_i N_i(Z).
$$
The functions $N_i(Z)$ are going
to be (piecewise) polynomials called *shape functions*. The coefficients
$d_i$ are unknown constants we call the *degrees of freedom (DoFs)*. We
can use matrix notation to express this relationship:
$$
w^h(Z) = {\boldsymbol N}(Z){\boldsymbol d}\quad\text{where}\quad
  {\boldsymbol N}(Z)=
  \left(
    \begin{array}{ccc}
      N_1(Z) & \cdots & N_M(Z)
    \end{array}
  \right)
  \quad\text{and}\quad
  {\boldsymbol d}=\left(
    \begin{array}{c}
      d_1 \\ \vdots \\ d_M
    \end{array}
  \right).
$$
We can find the derivative of $w^h$ by evaluating
$$
\frac{dw^h}{dZ}(Z) = {\boldsymbol B}(Z){\boldsymbol d},\quad\text{where}\quad
{\boldsymbol B}(Z):=\frac{d{\boldsymbol N}}{dZ}(Z)=
\left(
    \begin{array}{ccc}
        \frac{dN_1}{dZ} & \cdots & \frac{dN_M}{dZ}
    \end{array}
\right).
$$
This formula is valid as the vector of coefficients ${\boldsymbol d}$ doesn't depend on $Z$.

If test functions $\phi$ are approximated in the same ways as $w$ (this is
known as a *Galerkin approximation*), then we define
$$
\phi^h(Z) = 
{\boldsymbol N}(Z){\boldsymbol \phi}
\quad\text{where}\quad
{\boldsymbol \phi}=
\left(
    \begin{array}{c}
          \phi_1 \\ \vdots \\ \phi_M
    \end{array}
\right).
$$
Going back to the weak form
@eq-weakform, let's replace $w$ and $\phi$ by the
approximations $w^h$ and $\phi^h$, giving
$$
\int_0^LE
\underbrace{\frac{d{\boldsymbol N}}{dZ}{\boldsymbol d}}_{\displaystyle\frac{dw^h}{dZ}}\,
\underbrace{\frac{d{\boldsymbol N}}{dZ}{\boldsymbol \phi}}_{\displaystyle\frac{d\phi^h}{dZ}}\,dZ
+\sigma \underbrace{\vphantom{\frac{d{\boldsymbol N}}{dZ}{\boldsymbol d}}{\boldsymbol N}(L){\boldsymbol \phi}}_{\displaystyle \phi^h(L)}+\int_0^L\rho g\underbrace{\vphantom{\frac{d{\boldsymbol N}}{dZ}{\boldsymbol d}}{\boldsymbol N}{\boldsymbol \phi}}_{\displaystyle \phi^h} \,dZ=0.
$$
Since ${\boldsymbol N}{\boldsymbol \phi}$ and
${\boldsymbol B}{\boldsymbol \phi}$ are scalars, we have
${\boldsymbol N}{\boldsymbol \phi}= {\boldsymbol \phi}^T{\boldsymbol N}^T$ and
${\boldsymbol B}{\boldsymbol \phi}= {\boldsymbol \phi}^T{\boldsymbol B}^T$. We
can use the latter result to write the integral on the right hand side
as:
$$
\int_0^LE{\boldsymbol B}{\boldsymbol d}{\boldsymbol B}{\boldsymbol \phi}\,dZ = {\boldsymbol \phi}^T\left(\int_0^LE{\boldsymbol B}^T{\boldsymbol B}\,dZ\right){\boldsymbol d}.
$$
The bracketed term on the right is a matrix, called the *stiffness
matrix*, often denoted ${\boldsymbol K}$. It has entries:
$$
K_{ij} = \int_0^LE\frac{dN_i}{dZ}\frac{dN_j}{dZ}\,dZ.
$$
Note that
${\boldsymbol K}$ is symmetric, so ${\boldsymbol K}= {\boldsymbol K}^T$.
Introducing the column vector
$$
{\boldsymbol f}:= \sigma {\boldsymbol N}(L)^T + \int_0^L \rho g {\boldsymbol N}^T\,dZ,
$$
we can write the approximate weak form as
$$
{\boldsymbol \phi}^T{\boldsymbol K}{\boldsymbol d}+ {\boldsymbol \phi}^T{\boldsymbol f}={\boldsymbol \phi}^T({\boldsymbol K}{\boldsymbol d}+{\boldsymbol f})=0.
$$ {#eq-coldiscreteform}
If we want the approximate weak form to hold for all approximate
solutions, then
@eq-coldiscreteform has to hold for all vectors
${\boldsymbol \phi}$, and that means that ${\boldsymbol d}$ is the vector
which solves the equation
${\boldsymbol K}{\boldsymbol d}+{\boldsymbol f}=\boldsymbol{0}$, which
we can solve (if we know ${\boldsymbol K}$ and ${\boldsymbol f}$!) using
a linear solve.

Note that just as for the finite difference methods we thought about in
the Fluids part of the module, we end up needing to solve a linear
system of equations where ${\boldsymbol f}$ encodes both the forces
acting in the domain and aspects of the boundary conditions!

### Choosing shape functions

The abstract work we did above didn't need us to make any particular
choice of shape function, but now we need to make a choice to put the
methodology into practice. The usual choice for FEM in particular is to
split the domain into *elements* which are subvolumes of the domain. For
example, we could split the domain $[0,L]$ into 3 equal pieces, the
intervals $(0,\frac13L)$, $(\frac13L,\frac23L)$, and $(\frac23L,L)$, as
shown in @fig-basisoverlap. Then, we choose a polynomial *order* on
each interval. If we choose *first-order* or *piecewise linear*
elements, then we have that each shape function is
$$
N_i(Z) = a_0+a_1Z,
$$
where the constants $a_0$ and $a_1$ will depend
on which element we are on. To specify the shape functions further, we
make two requirements: 

  1. At the end-points of the elements, $Z_k = \frac{k}{3}L$, the shape functions are *continuous*.
  2. The shape functions have the *interpolation* or Kronecker delta
  property, which is the requirement that
  $$
  N_i(Z_k)
  = \delta_{ik}
  =
  \begin{cases}
      1 & i=k\\
      0 & i\neq k.
  \end{cases}
  $$

These choices lead us to define 4 shape functions (for convenience, we
define $h = L/3$):
$$
\begin{aligned}
    N_0(Z) &= 
    \begin{cases}
        1-\frac{Z}{h} & 0\leq Z\leq h\\
        0 & \text{otherwise},
    \end{cases}
    &
    N_1(Z) &=
    \begin{cases}
        \frac{Z}{h} & 0 \leq Z\leq h\\
        2-\frac{Z}{h} & h \leq Z\leq 2h\\
        0 & \text{otherwise},
    \end{cases}\\
    N_2(Z) &= 
    \begin{cases}
        \frac{Z}{h}-1 & h \leq Z\leq 2h\\
        3-\frac{Z}{h} & 2h \leq Z\leq 3h\\
        0 & \text{otherwise},
    \end{cases}&
    N_3(Z) &=
    \begin{cases}
        \frac{Z}{h}-2 & 2h \leq Z \leq 3h\\
        0 & \text{otherwise}.
    \end{cases}
\end{aligned}
$$
These functions are illustrated in @fig-basisoverlap.

::: {#fig-basisoverlap}
![](tikz/BasisOverlap.svg){height=5cm}

The spatial grid with the 3 piecewise linear shape
functions. Note the overlapping regions where adjacent basis functions
are non-zero.
:::

In this case, the derivatives are:
$$
\begin{aligned}
    \frac{dN_0}{dZ}(Z) &= 
    \begin{cases}
        -\frac{1}{h} & 0\leq Z\leq h\\
        0 & \text{otherwise},
    \end{cases}
    &\frac{dN_1}{dZ}(Z) &=
    \begin{cases}
        \frac{1}{h} & 0 \leq Z\leq h\\
        -\frac{1}{h} & h \leq Z\leq 2h\\
        0 & \text{otherwise},
    \end{cases}\\
    \frac{dN_2}{dZ}(Z) &=
    \begin{cases}
        \frac{1}{h} & h \leq Z\leq 2h\\
        -\frac{1}{h} & 2h \leq Z\leq 3h\\
        0 & \text{otherwise},
    \end{cases}&
    \frac{dN_3}{dZ}(Z) &= \begin{cases}
        \frac{1}{h} & 2h \leq Z \leq 3h\\
        0 & \text{otherwise}.
    \end{cases}
\end{aligned}
$$

Before proceeding, we note that there is one shape function we won't
need. Recall that we want $w(0)=0$ and $\phi(0)=0$. In order to enforce
this conditions, we can simply discard any entries involving $N_0$
(setting $d_0=0$ and $\phi_0=0$), as this is the only shape function that is non-zero
at the end.

To assemble the stiffness matrix, ${\boldsymbol K}$, we now need to
compute
$$
K_{ij} = \int_0^L E\frac{dN_i}{dZ}\frac{dN_j}{dZ}\,dZ.
$$
Let's do an example for the case where $i=j=2$, so we compute entry $K_{22}$.
In this case, we need to compute
$$
\begin{aligned}
    K_{22} = \int_0^L E\left(\frac{dN_2}{dZ}\right)^2\,dZ
    &= \int_h^{2h}E\frac{1}{h^2}\,dZ+\int_{2h}^{3h} E\left(-\frac{1}{h}\right)^2\,dZ\\
    &=\frac{E}{h}+\frac{E}{h} = \frac{2E}{h}.
\end{aligned}
$$
On the first line, we note that the integral over the
interval $(0,h)$ is zero, so we discard it. In general, we only need to
compute the integrals on the elements where the regions where the shape
functions have non-zero derivative (the fancy maths word for this is the
*support* of the shape function).

By carefully splitting up the domain and working through the cases, you
can check that
$$
{\boldsymbol K}=
\frac{E}{h}\left(
\begin{array}{rrr}
    2 & -1 & 0 \\
    -1 &  2 & -1 \\
    0 & -1  & 1
\end{array}
\right).
$$
The $K_{22}$ entry is the central one in the matrix
($K_{ij}$ is the entry in the $i$th row and $j$th column). To find the
vector ${\boldsymbol f}$, we need to evaluate the shape functions and
calculate more integrals. In this case,
$$
\sigma {\boldsymbol N}^T(L) = \sigma
  \left(
    \begin{array}{c}
      0 \\ 0 \\ 1
    \end{array}
  \right),\qquad\text{and}\qquad \rho g\int_0^L{\boldsymbol N}^TdZ = \rho g h
  \left(
    \begin{array}{c}
      1 \\ 1 \\ \frac12
    \end{array}
  \right).
$$
Putting everything together and rearranging, we find we must solve
$$
\frac{E}{h}\left(
    \begin{array}{rrr}
      2 & -1 & 0 \\
     -1 &  2 & -1 \\
      0 & -1  & 1
    \end{array}
  \right)\left(
    \begin{array}{c}
      d_1 \\ d_2 \\ d_3
    \end{array}
  \right)
  =-\left(
    \begin{array}{c}
      \rho g h \\ \rho g h \\ \frac12\rho g h + \sigma
    \end{array}
  \right).
$$ {#eq-coldiscrete3element}
If we solve and append the
$d_0=0$ degree of freedom which we discarded, we see we get incredibly close
agreement with the analytic solution; see @fig-colcomparison.

::: {#fig-colcomparison}
![](images/ColumnComparison.png){width=8cm}

Comparison of the analytic solution (dashed) and the finite element
solution (solid) for the column problem with 3 elements. The values of
the approximate solution at the nodes are shown with plus signs.
Parameters for stainless steel were used, with an applied load of
$\sigma=50$kPa. Given how stiff steel is, the displacement is very
small, fractions of a
micrometre!
:::

## Numerical quadrature

While we have computed integral by hand up to now, we would like to
avoid doing this in general and automate the process in software. The
good news is that since we have chosen shape functions which have a nice
polynomial form on each element, we can actually do this almost exactly
through evaluating the functions we integrate at special points called
*quadrature points*, and multiplying by the right weights. There are
actually many ways to construct quadrature rules; the method we focus on
is called *Legendre-Gauss quadrature*.

Let's consider the integral
$$
I = \int_{-1}^1f(\xi)\,d\xi.
$$
If we want to approximate this
integral, a simple option is to simply approximate the function $g$ by
taking its value at a single point in the domain. If we pick the point
$\xi^*$, then the approximation becomes
$$
I\approx \int_{-1}^1 f(\xi^*)\,d\xi = 2f(\xi^*).
$$
See Figure [4.2](#fig:singlepoint){reference-type="ref"
reference="fig:singlepoint"} for an illustration.

::: {#fig-singlepoint}

![](tikz/SinglePointQuadrature.svg){height=5cm}

Single point quadrature. The red shaded area is the
approximation to the area under the curve.
:::

Obviously, this is only going to be a good approximation of the integral
if $f$ doesn't vary too much over the interval we're integrating. In
fact, the result would be exact if the function $f$ was constant. To
specify $\xi^*$, we can ask whether there is a best possible choice. One
way to define 'best' is to choose the point that always gives the right
answer for affine functions, not just for constants. If
$f(\xi) = a_0+a_1\xi$, then notice that
$$
\int_{-1}^1 f(\xi) \,d\xi = 2a_0 = 2 f(0).
$$
This means that picking
$\xi^*=0$ gives us exactly the correct result if the function $f$ is a
linear function, not just constant! Any other choice will lead to some
unavoidable error when integrating linear functions. Of course, we can't
hope it to be exact for quadratic functions or anything else more
complicated. The factor 2 that enters in front of $f(0)$ is called the
*weight* for the quadrature point.

To get better results for a more complicated function, we need to
evaluate the function at more points and choose appropriate weights. In
general, it turns out that we can use $q$ different points to get
accurate integrals for polynomial functions of degree $2q-1$. Each
quadrature point is assigned its own weight, and the general
approximation is of the form
$$
\int_{-1}^1f(\xi)\,d\xi\approx \sum_{k=1}^q f(\xi_k)w_k.
$$
In the
example above, $w_1=2$. This approach to approximating integrals is
called *Gauss quadrature*. Since finite elements tend to use piecewise
polynomial shape functions, Gauss quadrature provides us with a great
way to compute integrals: by evaluation the shape functions at a few
points, we can do all the integrals exactly!
@tbl-gauss gives the quadrature points and weights for $q=1$, $2$ and $3$. For
example, if $q=3$, then we have the approximation
$$
\int_{-1}^1 f(\xi)\,d\xi\approx \sum_{k=1}^3f(\xi_k)w_k = \frac{5 f\Big(-\sqrt{3/5}\Big)+8f(0)+5f\Big(+\sqrt{3/5}\Big)}{9}.
$$
Points and weights can be found for ever higher values of $q$, and
libraries in various programming languages are available to compute
them. In practice, the integrals converge very fast with the number of
quadrature points, so we don't need many; it's usually more convenient
to refine our elements instead.

::: {#tbl-gauss}
   $q$        Quadrature points, $\xi_k$             Weights, $w_k$
  ----- -------------------------------------- ---------------------------
    1                     0                                 2
    2     $-\sqrt{\tfrac13},\sqrt{\tfrac13}$              $1,1$
    3    $-\sqrt{\tfrac35},0,\sqrt{\tfrac35}$   $\frac59,\frac89,\frac59$

  : A table of quadrature points for functions defined on the interval
  $[-1,1]$, with corresponding weights. The quadrature with $q$ points
  gives the integral exactly for polynomials of degree $2q-1$.
:::

To handle integrals over another interval, say $[a,b]$, we can change
variable by defining
$$
X(\xi) = \tfrac12a(\xi-1)+\tfrac12b(\xi+1).
$$
In this case, we can change variable in the integral and then use our
quadrature rule as follows:
$$
\begin{aligned}
    \int_a^b f(X)\,dX
    &= \int_{-1}^1 f\left(\tfrac12a(\xi-1)+\tfrac12b(\xi+1)\right)\frac{dX}{d\xi}\,d\xi\\
    &= \int_{-1}^1 f\left(\tfrac12a(\xi-1)+\tfrac12b(\xi+1)\right)\frac{b-a}{2}\,d\xi\\
    &\approx \sum_{i=1}^qw_k f\left(\tfrac12a(\xi_k-1)+\tfrac12b(\xi_k+1)\right)\frac{b-a}{2}.
\end{aligned}
$$
In the workshop this week, we will discuss methods to implement numerical
quadrature, both directly and using python packages.

## Improving our approximation

Our derivation here is obviously not limited to dividing the domain into
$3$ elements: in 1D, if we choose to divide the domain into $M$
elements, we get $M+1$ piecewise linear shape functions. If we make the
elements smaller, we expect to get a better approximation to the true
solution: indeed, this is something we will discuss later on in the
module. We will see that when things are working correctly, the error in
our solution is controlled by $h$, the size of the largest element used.
An important thing to note is that in general, the elements do not all
have to be the same size; indeed, this will be an important
consideration in the chapters to come! Even in the case we have
considered here, we could freely split the domain into other sets of
three parts; for example we could set $Z_1=\tfrac12$ and $Z_2=\tfrac34$,
which would result in different shape functions.

Instead of dividing the domain into more elements, another option to get
better agreement with the solution is to increase the polynomial order
of the shape functions, for example by setting
$$
N_i(Z) = a_0+a_1Z+a_2Z^2
$$
on each element. In this case, continuity
and the Kronecker delta property for the endpoints of the elements are
not enough on their own to define the shape functions uniquely. Instead,
we need to add extra *nodes* to each element. The usual choice for
quadratic functions is to add an extra node in the middle of each
element. A plot of the resulting shape functions is shown in
@fig-quadraticshapefuncs; you will be asked to find the form
of these (on a single element) in this week's workshop. You could go
even further, using cubics, quartics or even higher order polynomials,
but you would need to add more nodes.

::: {#fig-quadraticshapefuncs}
![](tikz/QuadraticShapeFunctions.svg){height=5cm}

A plots of the quadratic shape functions on domain made up
of two elements. One element covers the interval $(Z_0,Z_2)$,
the other covers the interval $(Z_2,Z_4)$.
Note that $Z_1$ and $Z_3$ are extra nodes
added to the centre of the element.
:::

Note that the problem we end up with to solve,
@eq-coldiscrete3element, looks very similar to the way we
discretised a second-order problem with finite differences, even if the
philosophy that we used to get to it is rather different. Indeed, you
might ask what we have gained by doing all of the work here, and for
this particular problem, we have gained very little! However, we will
see in later chapters is that the finite element approach is more
flexible, particularly when it comes to problems in higher dimensions.
Moreover, the philosophy introduced here, while seeming cumbersome at
the moment, can be very effectively generalised and automated in
software.

